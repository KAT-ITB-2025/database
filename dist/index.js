import {pgEnum,pgTable,timestamp,text,date,integer,serial,unique,boolean}from'drizzle-orm/pg-core';import {init}from'@paralleldrive/cuid2';import {relations}from'drizzle-orm';var N=init({length:8}),r=()=>new Date;var D=pgEnum("account_role_enum",["admin","mamet","mentor","user","guest"]),c=pgTable("account",{id:text("id").primaryKey(),nim:text("nim").notNull().unique(),password:text("password").notNull(),role:D("role").default("user").notNull(),createdAt:timestamp("created_at").defaultNow(),updatedAt:timestamp("updated_at").$onUpdate(r)}),G=relations(c,({one:e})=>({user:e(n)}));var n=pgTable("user",{id:text("id").primaryKey().references(()=>c.id),nim:text("nim").notNull().unique(),email:text("email").unique(),fullName:text("full_name"),birthDate:date("birth_date"),phoneNumber:text("phone_number"),idLine:text("id_line"),idDiscord:text("id_discord"),idInstagram:text("id_instagram"),fakultas:text("fakultas"),prodi:text("prodi"),kelompok:text("kelompok"),createdAt:timestamp("created_at").defaultNow(),updatedAt:timestamp("updated_at").$onUpdate(r)});var T=pgEnum("media_bucket_enum",["core","oskm","dikpus","profile","submission-dikpus","submission-oskm","other"]),Z=pgTable("media",{id:text("id").primaryKey().$defaultFn(N),creatorId:text("creator_id").references(()=>n.id,{onDelete:"cascade"}).notNull(),name:text("name").unique().notNull(),bucket:T("bucket").notNull().default("other"),type:text("type").notNull(),url:text("url").notNull(),updatedAt:timestamp("updated_at",{withTimezone:true}).notNull().$onUpdate(r),createdAt:timestamp("created_at",{withTimezone:true}).notNull().defaultNow()});var $=pgEnum("user_stage_progress_enum",["completed","in_progress","locked"]),m=pgTable("stage",{id:serial("id").primaryKey(),stageNumber:integer("stage_number").notNull(),title:text("title").notNull(),description:text("description"),availableDate:timestamp("available_date",{mode:"date",withTimezone:true}),createdAt:timestamp("created_at").defaultNow(),updatedAt:timestamp("updated_at").$onUpdate(r)}),U=pgTable("user_stage_progress",{id:text("id").primaryKey(),userId:text("user_id").references(()=>n.id,{onDelete:"cascade"}),stageId:serial("stage_id").references(()=>m.id,{onDelete:"cascade"}),status:$("status").default("locked").notNull(),score:integer("score"),completedAt:timestamp("completed_at")},e=>[unique("user_stage_unique").on(e.userId,e.stageId)]),g=pgTable("material",{id:serial("id").primaryKey(),stageId:serial("stage_id").references(()=>m.id,{onDelete:"cascade"}),profile:text("profile")}),P=pgTable("dialog",{id:serial("id").primaryKey(),materialId:serial("material_id").references(()=>g.id,{onDelete:"cascade"}),content:text("content"),order:integer("order").notNull()}),f=pgTable("quiz",{id:serial("id").primaryKey(),stageId:serial("stage_id").references(()=>m.id,{onDelete:"cascade"})}),_=pgTable("question",{id:serial("id").primaryKey(),quizId:serial("quiz_id").references(()=>f.id,{onDelete:"cascade"}),question:text("question").notNull(),order:integer("order").notNull()}),v=pgTable("answer_option",{id:serial("id").primaryKey(),questionId:serial("question_id").references(()=>_.id),option:text("option").notNull(),optionStatus:boolean("option_status").notNull()}),ae=relations(m,({many:e})=>({userStageProgresses:e(U),materials:e(g),quizzes:e(f)})),ne=relations(f,({many:e})=>({questions:e(_)})),se=relations(_,({many:e})=>({answerOptions:e(v)})),de=relations(g,({many:e})=>({dialogs:e(P)}));export{c as account,G as accountRelation,D as accountRoleEnum,v as answerOption,P as dialog,g as material,de as materialRelation,Z as media,T as mediaBucketEnum,_ as question,se as questionRelation,f as quiz,ne as quizRelation,m as stage,ae as stageRelation,n as user,U as userStageProgress,$ as userStageProgressStatusEnum};